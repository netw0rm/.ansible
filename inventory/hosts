###
local	ansible_connection=local





























##########################################
# This is the default ansible 'hosts' file.
#
# It should live in /etc/ansible/hosts
#
#   - Comments begin with the '#' character
#   - Blank lines are ignored
#   - Groups of hosts are delimited by [header] elements
#   - You can enter hostnames or ip addresses
#   - A hostname/ip can be a member of multiple groups

# Ex 1: Ungrouped hosts, specify before any group headers.

## green.example.com
## blue.example.com
## 192.168.100.1
## 192.168.100.10

# Ex 2: A collection of hosts belonging to the 'webservers' group

## [webservers]
## alpha.example.org
## beta.example.org
## 192.168.1.100
## 192.168.1.110

# If you have multiple hosts following a pattern you can specify
# them like this:

## www[001:006].example.com

# Ex 3: A collection of database servers in the 'dbservers' group

## [dbservers]
## 
## db01.intranet.mydomain.net
## db02.intranet.mydomain.net
## 10.25.1.56
## 10.25.1.57

# Here's another example of host ranges, this time there are no
# leading 0s:

## db-[99:101]-node.example.com
#
##########################################
# This is the default ansible 'hosts' file.
#
# It should live in /etc/ansible/hosts
#
#   - Comments begin with the '#' character
#   - Blank lines are ignored
#   - Top level entries are assumed to be groups, start with 'all' to have a full hierarchy
#   - Hosts must be specified in a group's hosts:
#     and they must be a key (: terminated)
#   - groups can have children, hosts and vars keys
#   - Anything defined under a host is assumed to be a var
#   - You can enter hostnames or IP addresses
#   - A hostname/IP can be a member of multiple groups

# Ex 1: Ungrouped hosts, put them in 'all' or 'ungrouped' group
##all:
##  hosts:
##      green.example.com:
##          ansible_ssh_host: 191.168.100.32
##          anyvariable: value
##      blue.example.com:
##      192.168.100.1:
##      192.168.100.10:

# Ex 2: A collection of hosts belonging to the 'webservers' group
##  children:
##    webservers:
##      hosts:
##        alpha.example.org:
##        beta.example.org:
##        192.168.1.100:
##        192.168.1.110:

# Ex 3: You can create hosts using ranges and add children groups and vars to a group
# The child group can define anything you would normally add to a group

##    testing:
##      hosts:
##        www[001:006].example.com:
##      vars:
##        testing1: value1
##      children:
##        webservers:
##            hosts:
##                beta.example.org:

# Ex 4: all vars
# keeping within 'all' group you can define common 'all' vars here with lowest precedence

##  vars:
##      commontoall: thisvar
